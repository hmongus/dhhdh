#include "pch.h"
#include "iostream"
#include "windows.h"
#include <conio.h>
#define FILAS 47
#define COLUMNAS 91
#define IZQUIERDA 75
#define DERECHA 77
#define ABAJO 80
#define ARRIBA 72
#define SPACEBAR 32
using namespace System;
using namespace std;
void ventana(int x, int y) {
    Console::SetWindowSize(x, y);
}
void cursor(int x, int y) {
    Console::SetCursorPosition(x, y);
    Console::CursorVisible = false;
}
void color(int c)
{
    switch (c)
    {
    case 1: Console::ForegroundColor = ConsoleColor::Black; break;
    case 2: Console::ForegroundColor = ConsoleColor::DarkBlue; break;
    case 3: Console::ForegroundColor = ConsoleColor::DarkGreen; break;
    case 4: Console::ForegroundColor = ConsoleColor::DarkRed; break;
    case 5: Console::ForegroundColor = ConsoleColor::DarkMagenta; break;
    case 6: Console::ForegroundColor = ConsoleColor::DarkYellow; break;
    case 7: Console::ForegroundColor = ConsoleColor::Gray; break;
    case 8: Console::ForegroundColor = ConsoleColor::DarkGray; break;
    case 9: Console::ForegroundColor = ConsoleColor::Blue; break;
    case 10: Console::ForegroundColor = ConsoleColor::Green; break;
    case 11: Console::ForegroundColor = ConsoleColor::Cyan; break;
    case 12: Console::ForegroundColor = ConsoleColor::Red; break;
    case 13: Console::ForegroundColor = ConsoleColor::Magenta; break;
    case 14: Console::ForegroundColor = ConsoleColor::Yellow; break;
    case 15: Console::ForegroundColor = ConsoleColor::White; break;
    }
}

void bcolor(int c)
{
    switch (c)
    {
    case 1: Console::BackgroundColor = ConsoleColor::Black; break;
    case 2: Console::BackgroundColor = ConsoleColor::DarkBlue; break;
    case 3: Console::BackgroundColor = ConsoleColor::DarkGreen; break;
    case 4: Console::BackgroundColor = ConsoleColor::DarkRed; break;
    case 5: Console::BackgroundColor = ConsoleColor::DarkMagenta; break;
    case 6: Console::BackgroundColor = ConsoleColor::DarkYellow; break;
    case 7: Console::BackgroundColor = ConsoleColor::Gray; break;
    case 8: Console::BackgroundColor = ConsoleColor::DarkGray; break;
    case 9: Console::BackgroundColor = ConsoleColor::Blue; break;
    case 10: Console::BackgroundColor = ConsoleColor::Green; break;
    case 11: Console::BackgroundColor = ConsoleColor::Cyan; break;
    case 12: Console::BackgroundColor = ConsoleColor::Red; break;
    case 13: Console::BackgroundColor = ConsoleColor::Magenta; break;
    case 14: Console::BackgroundColor = ConsoleColor::Yellow; break;
    case 15: Console::BackgroundColor = ConsoleColor::White; break;
    }
}

void pp_imprime(int x, int y) { //imprime al presonaje principal

    int temporalx;
    temporalx = x;  //para regenar el valor de x inicial
    char matriz_p[3][3] = {
        {32,111,32},
        {45,197,45},
        {179,32,92},
    };
    color(15);
    for (int f = 0; f < 3; f++, y++)
    {
        for (int c = 0; c < 3; c++, x++)
        {
            cursor(x, y);
            cout << matriz_p[f][c];
        }
        x = temporalx;
    }
}
void a_imprime(int xxx, int yyy) { //imprime agentes, luego lo unimos en una sola funcion de impresion
    char matriz_a[3][3] = {
                {200,32,188},
                {32,219,32},
                {201,32,187},
    };
    color(12);
    for (int i = 0; i < 27; i++) {
        int xx = xxx;
        int yy = yyy;

        for (int f = 0; f < 3; f++, yy++)
        {

            for (int c = 0; c < 3; c++, xx++)
            {
                cursor(xx, yy);
                cout << matriz_a[f][c];
            }
            xx = xxx;
        }
    }
}
void pp_borra(int x, int y) { //borra al presonaje principal

    int temporalx;
    temporalx = x; //para regenar el valor de x inicial
    char mati[3][3] = {
        {32,32,32},
        {32,32,32},
        {32,32,32},
    };
    color(1);
    for (int f = 0; f < 3; f++, y++)
    {
        for (int c = 0; c < 3; c++, x++)
        {
            cursor(x, y);
            cout << mati[f][c];
        }
        x = temporalx;
    }
}
void a_borra(int xxx, int yyy) {
    char matriz_a[3][3] = {
                {32,32,32},
                {32,32,32},
                {32,32,32},
    };
    color(1);
    for (int i = 0; i < 27; i++) {
        int xx = xxx;
        int yy = yyy;

        for (int f = 0; f < 3; f++, yy++)
        {

            for (int c = 0; c < 3; c++, xx++)
            {
                cursor(xx, yy);
                cout << matriz_a[f][c];
            }
            xx = xxx;
        }
    }
}

void p_presentacion()
{
    int x = 30, y = 1, dy = 1;
    int clr = 2 + rand() % 14;
    Console::SetCursorPosition(x, y); color(clr); cout << R"(
                    ___  ___ ___  ___________ ___________  ___ ______ _____ 
                    |  \/  |/ _ \|___  |  ___/  __ | ___ \/ _ \|  ___|_   _|
                    | .  . / /_\ \  / /| |__ | /  \| |_/ / /_\ | |_    | |  
                    | |\/| |  _  | / / |  __|| |   |    /|  _  |  _|   | |  
                    | |  | | | | ./ /__| |___| \__/| |\ \| | | | |     | |  
                    \_|  |_\_| |_\_____\____/ \____\_| \_\_| |_\_|     \_/                                                         
                    
                        )"<<"\n";

    while (true)
    {
        clr= 2 + rand() % 14;
        Console::SetCursorPosition(x, y); color(1); cout << R"(
                    ___  ___ ___  ___________ ___________  ___ ______ _____ 
                    |  \/  |/ _ \|___  |  ___/  __ | ___ \/ _ \|  ___|_   _|
                    | .  . / /_\ \  / /| |__ | /  \| |_/ / /_\ | |_    | |  
                    | |\/| |  _  | / / |  __|| |   |    /|  _  |  _|   | |  
                    | |  | | | | ./ /__| |___| \__/| |\ \| | | | |     | |  
                    \_|  |_\_| |_\_____\____/ \____\_| \_\_| |_\_|     \_/                                                         
                    
                        )" << "\n";
        y += dy;
        Console::SetCursorPosition(x, y); color(clr); cout << R"(
                    ___  ___ ___  ___________ ___________  ___ ______ _____ 
                    |  \/  |/ _ \|___  |  ___/  __ | ___ \/ _ \|  ___|_   _|
                    | .  . / /_\ \  / /| |__ | /  \| |_/ / /_\ | |_    | |  
                    | |\/| |  _  | / / |  __|| |   |    /|  _  |  _|   | |  
                    | |  | | | | ./ /__| |___| \__/| |\ \| | | | |     | |  
                    \_|  |_\_| |_\_____\____/ \____\_| \_\_| |_\_|     \_/                                                         
                    
                        )" << "\n";

        if (y == 20)
        {
            dy = 0;
            Console::SetCursorPosition(x, 1); color(clr); cout << R"(
                                        _________-----_____
                             _____------           __      ----_
                     ___----             ___------              \
                        ----________        ----                 \
                                    -----__    |             _____)
                                         __-                /     \
                             _______-----    ___--          \    /)\
                       ------_______      ---____            \__/  /
                                    -----__    \ --    _          /\
                                          --__--__     \_____/   \_/\
                                                  ----|   /          |
                                                      |  |___________|
                                                      |  | ((_(_)| )_)
                                                      |  \_((_(_)|/(_)
                                                      \             (
                                                       \_____________)
                                                      
                    
                        )" << "\n";
            cursor(x+2, y + 9); color(12); cout << "PRESIONE ESPACIO PARA CONTINUAR";

        }
        if (kbhit())
        {
            char tecla = getch();
            if (tecla == SPACEBAR)break;
        }
        _sleep(100);
    }
    Console::Clear();
    return;
}

void instrucciones()
{
    cursor(38, 5); color(7); cout << R"(
                    
                  ___ _  _ ___ _____ ___ _   _  ___ ___ ___ ___  _  _ ___ ___ 
                 |_ _| \| / __|_   _| _ | | | |/ __/ __|_ _/ _ \| \| | __/ __|
                  | || .` \__ \ | | |   | |_| | (_| (__ | | (_) | .` | _|\__ \
                 |___|_|\_|___/ |_| |_|_\\___/ \___\___|___\___/|_|\_|___|___/
                                                              

                        )" << "\n";
    cursor(10, 13); color(15); cout << "- Con las teclas direccionales podras mover";
    cursor(12, 14); color(15); cout << "al personaje principal, el cual cuenta con tan solo 3 vidas.";
    cursor(10, 15); color(15); cout << "- El personaje principal empezará en un punto A";
    cursor(12, 16); color(15); cout << "y tendra como objetivo pasar por un laberinto para llegar a un punto B.";
    cursor(10, 17); color(15); cout << "- En el punto B estarán los amigos del personaje principal, estos esperan";
    cursor(12, 18); color(15); cout << "ser rescatados";
    cursor(10, 19); color(15); cout << "- El laberinto contará con diferentes elementos:";
    cursor(12, 20); color(15); cout << ".Aliados "; bcolor(14); cout << " ";
    cursor(12, 21); bcolor(1); cout << ".Agentes "; bcolor(12); cout << " ";
    cursor(12, 22); bcolor(1); cout << ".Vitaminas: ";
    cursor(14, 23); bcolor(10); cout << " "; bcolor(1);cout<< ": Te da una vida extra.";
    cursor(14, 24); bcolor(13); cout << " "; bcolor(1); cout << ": Reduce la forma del personaje.";
    cursor(12, 25); color(15); cout << ".Portales "; bcolor(8); cout << " "; bcolor(1); cout << " "; bcolor(13); cout << " ";
    bcolor(1); cout << " "; bcolor(9); cout << " "; bcolor(1); cout << " "; bcolor(15); cout << " "; bcolor(1); "   "; bcolor(2); cout << " ";bcolor(1); cout << " "; bcolor(6); cout << " "; bcolor(1);
    //falta agregarle detalles
    getch();
    Console::Clear();
}

void flecha(int x, int y)
{
    cursor(x, y); cout << "---" << char(92);
    cursor(x, y + 1); cout << "---" << char(47);
}

int niveles()
{
    int x, y, topcion;
    bool print = false;
    while (true)
    {
        int _clr_ = 2 + rand() % 14;
        cursor(3, 2); color(_clr_);cout << R"(          
      _   _ 
     | \ | |                                                        
     |  \| |                   
     | . ` |
     | |\  |
     \_| \_/ 
      _____ 
     |_   _|
       | |  
       | |  
      _| |_ 
      \___/   
      _   _ 
     | | | |
     | | | |
     | | | |
     \ \_/ /
      \___/ 
      _____ 
     |  ___|
     | |__  
     |  __| 
     | |___ 
     \____/   
      _     
     | |    
     | |    
     | |    
     | |____
     \_____/       
      _____ 
     |  ___|
     | |__  
     |  __| 
     | |___ 
     \____/   
     _____ 
    /  ___|
    \ `--. 
     `--. \
    /\__/ /
    \____/ 
                        )" << "\n";
        _sleep(50);
        cursor(12, 9); color(10); cout << R"(
                     .-------------------------------------------------------------. 
                     |   _    _  _____  _____    __   __  _____  __                |  
                     |  | |  | ||     ||   _ |  |  |_|  ||  _  ||  |     ,-.___,-. |
                     |  |  |_| ||  _  ||  | ||  |       || |_| ||  |     \_/_ _\_/ |
                     |  |      || | | ||  |_||_ |       ||     ||  |       )O_O(   |
                     |  |  _   || |_| ||   __  ||       ||     ||  |__    { (_) }  |
                     |  | | |  ||     ||  |  | || ||_|| ||  _  ||     |    `-^-'   |
                     |  |_|  |_||_____||__|  |_||_|   |_||_| |_||_____|            |
                     '-------------------------------------------------------------' 


                                               





                                ------------------------------------------.
                               |  __ __   ____  ____   ___                |
                               | |  |  | /    ||    \ |   \      . - .    |
                               | |  |  ||  o  ||  D  )|    \     (o o)    |
                               | |  _  ||     ||    / |  D  |    | O \    |
                               | |  |  ||  _  ||    \ |     |    \    \   |
                               | |__|__||__|__||__|\_||_____|     `~~~'   |
                               '------------------------------------------'

)" << "\n";

        if (kbhit())
        {
            char tecla = getch();
            if (tecla == ARRIBA) 
            {
                x = 16, y = 14;
                print = true;
            }
            if (tecla == ABAJO) 
            { 
                x=24,y=30;
                print = true;
            }      
            if (x == 16 && y == 14 && tecla == SPACEBAR) { topcion = 1; break; }
            if (x == 24 && y == 30 && tecla == SPACEBAR) { topcion = 2; break; }
        }
        if (print == true)
        {
           color(15); flecha(x, y);
        }
    }

    return topcion;
}


int main()
{
    ventana(91, 47);
    int matriz[FILAS][COLUMNAS] = {
{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,},
{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
{1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,},
{1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,},
{1,0,0,0,0,0,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,},
{1,0,0,0,0,0,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,},
{1,0,0,0,0,0,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,},
{1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,},
{1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,},
{1,0,0,4,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,10,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,},
{1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,10,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,},
{1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,10,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,},
{1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,},
{1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,0,0,1,1,1,1,1,},
{1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,1,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,},
{1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,},
{1,0,0,0,0,0,1,0,0,0,0,1,1,1,1,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,3,0,1,0,0,0,0,0,0,0,1,},
{1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,},
{1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,},
{1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,6,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,},
{1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,1,6,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,},
{1,0,8,8,8,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,6,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,},
{1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,},
{1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,1,1,0,0,0,0,0,1,},
{1,0,0,0,0,0,1,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,},
{1,0,0,0,0,0,1,0,0,0,0,1,10,10,10,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,},
{1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,},
{1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,},
{1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,},
{1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,},
{1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,1,1,1,1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,},
{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,},
{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,},
{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,},
{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,},
{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,},
{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,0,0,0,1,0,0,0,0,0,1,},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,1,8,0,0,0,0,0,0,0,0,0,0,0,1,},
{0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,1,8,0,0,0,0,0,0,0,0,0,0,0,1,},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,1,8,0,0,0,0,0,0,0,0,0,0,0,1,},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,},
{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,},
    };

    p_presentacion();
    instrucciones();
    int opcion;
  while(true)
   {
      opcion=niveles();
      if(opcion==1)
      {
    for (int f = 0; f < FILAS; f++)
    {
        for (int c = 0; c < COLUMNAS; c++)
        {
            cursor(c, f);
            if (matriz[f][c] == 0) color(1);
            if (matriz[f][c] == 1) color(11);
            //portales
            if (matriz[f][c] == 5) color(9);
            if (matriz[f][c] == 6) color(13);
            if (matriz[f][c] == 7) color(8);
            if (matriz[f][c] == 8) color(15);
            if (matriz[f][c] == 9) color(2);
            if (matriz[f][c] == 10) color(6);
            //vitaminas
            if (matriz[f][c] == 4) color(10);
            if (matriz[f][c] == 3) color(13);
            cout << (char)219;
        }
    }
    //personaje principal
    int x = 85, y = 2;
    cursor(x, y); pp_imprime(x, y);
    //var agentes
    int x_a[27] = { 6,53,56,59,62,65,68,38,64,24,52,70,76,8,15,20,34,42,55,67,81,31,36,41,46,51,57 };
    int y_a[27] = { 2,2,2,2,2,2,2,8,9,15,15,18,16,24,24,24,25,25,29,27,36,42,42,42,42,42,42 };
    int dy_a[27] = { 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1 };
    for (int i = 0; i < 27; i++) {
        a_imprime(x_a[i], y_a[i]);
    }
    //aliado
    color(3); cursor(74, 31); cout << " 0"; cursor(74, 32); cout << "}|"; cursor(74, 33); cout << " w";
    
    int i=0;
    while (1) {
        //borrar
        pp_borra(x, y);
        cursor(x_a[i], y_a[i]); a_borra(x_a[i], y_a[i]);
        //mover
        //personaje principal
        if (kbhit()) {
            char tecla = getch();

            if (tecla == DERECHA && matriz[y][x + 3] != 1 && matriz[y + 2][x + 3] != 1 && matriz[y + 1][x + 3] != 1) { x++; }
            if (tecla == IZQUIERDA && matriz[y][x - 1] != 1 && matriz[y + 2][x - 1] != 1 && matriz[y + 1][x - 1] != 1) { x--; }
            if (tecla == ABAJO && matriz[y + 3][x] != 1 && matriz[y + 3][x + 2] != 1 && matriz[y + 3][x + 1] != 1) { y++; }
            if (tecla == ARRIBA && matriz[y - 1][x] != 1 && matriz[y - 1][x + 2] != 1 && matriz[y - 1][x + 1] != 1) { y--; }
        }
        //portales
        //portal azul 
        if (matriz[y][x] == 5 || matriz[y + 1][x] == 5) x = 15, y = 2;
        if (matriz[y][x + 2] == 5 || matriz[y + 1][x + 2] == 5) x = 8, y = 8;
        //portal magenta
        if ((matriz[y][x] == 6 || matriz[y + 1][x] == 6) && x == 24) x = 60, y = 23;
        if ((matriz[y][x] == 6 || matriz[y + 1][x] == 6) && x == 59) x = 25, y = 2;
        //portal gris oscuro
        if ((matriz[y][x + 2] == 7 || matriz[y + 1][x + 2] == 7) && x+2 == 70) x = 42, y = 2;
        if ((matriz[y][x + 2] == 7 || matriz[y + 1][x + 2] == 7) && x+2 == 45) x = 67, y = 36;
        //portal blanco
        if ((matriz[y][x] == 8 || matriz[y + 1][x] == 8) && x == 78) x = 2, y = 26;
        if ((matriz[y][x] == 8 || matriz[y][x + 1] == 8) && y == 25) x = 79, y = 42;
        //portal azul oscuro
        if (matriz[y][x] == 9 || matriz[y + 1][x] == 9 || matriz[y + 2][x] == 9) x = 67, y = 42;
        if (matriz[y][x + 2] == 9 || matriz[y + 1][x + 2] == 9) x = 52, y = 31;
        //portal anaranjado
        if (matriz[y][x] == 10 && y == 29) x = 70, y = 13;
        if (matriz[y][x] == 10 && x == 69) x = 12, y = 30;
        //agentes
        if (matriz[y_a[i] - 1][x_a[i]] == 1)dy_a[i] *= -1;
        if (matriz[y_a[i] + 3][x_a[i]] == 1)dy_a[i] *= -1;
        y_a[i] -= dy_a[i];

        //dibujar
        //p principal
        pp_imprime(x, y);
        //agentes
        cursor(x_a[i], y_a[i]); a_imprime(x_a[i], y_a[i]);
        i++;
        if (i > 26)i = 0;
        Sleep(1);
        }
        
        }
       if(opcion==2)
        { 
             //break;
             //no completado, laberinto 2(hard) 
         }
   
    }
    system("pause>0");
    return 0;
}
